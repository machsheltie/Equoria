---
description: Guidelines for Node.js/Express backend development
globs: ["src/server/**/*.js", "src/server/**/*.ts"]
alwaysApply: false
---
# Node.js/Express Backend Best Practices

## API Design
- Follow RESTful conventions for endpoints (e.g., `/api/users/:id`).
- Use HTTP status codes correctly (e.g., 200 for success, 400 for bad requests, 500 for server errors).
- Structure responses: `{ success: boolean, data: any, error: string | null }`.

## Modularity
- Organize code into controllers, services, and models.
- Keep controllers thin; delegate business logic to services.
- Use dependency injection for services and utilities.

## Error Handling
- Use middleware for global error handling.
- Validate inputs using libraries like `express-validator` or `zod`.
- Log errors with context using `winston`.

## Security
- Use `helmet` for secure HTTP headers.
- Implement rate limiting with `express-rate-limit`.
- Sanitize inputs to prevent injection attacks.

## Performance
- Use async/await for I/O-bound operations.
- Cache frequent queries with Redis or in-memory stores.
- Optimize middleware execution order.

## Testing
- Write unit and integration tests using Mocha and Chai.
- Mock dependencies with `sinon`.
- Run tests: `npm run test:backend`.

## Incremental Development
- Implement one endpoint or service at a time as specified.
- Do not modify unrelated routes or services.
- Validate changes with tests before proceeding.
- Confirm scope with the developer if the prompt is ambiguous.

## References
- @docs/architecture.md
- @docs/api_specs.md