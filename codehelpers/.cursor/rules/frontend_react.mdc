---
description: 
globs: 
alwaysApply: false
---
---
status: draft
description: Guidelines for React Native frontend development in Equoria
globs: ["frontend/**/*.jsx", "frontend/**/*.js"]
alwaysApply: false
---
# React Native Frontend Best Practices

## Component Design
- Use functional components with React Hooks (no class components).
- Name components in PascalCase (e.g., `HorseProfileScreen`, `StableList`).
- Keep components focused; split large screens into reusable children (e.g., `TraitCard`).
- Define prop types with PropTypes or JSDoc comments.
- Destructure props: `function StableList({ horses, filter }) { ... }`.
- Use `accessibilityRole` and `accessibilityLabel` for screen reader support.
- Follow file structure: `frontend/components/`, `frontend/screens/`, `frontend/navigation/`.

## State Management
- Use `useState`, `useEffect`, `useContext` for local state and side effects.
- Use Redux Toolkit for complex state (e.g., user inventory, event state).
- Avoid prop drilling; use Context API for shared data (e.g., user session).

## Styling (Tailwind)
- Use `nativewind` or `tailwind-rn` for Tailwind CSS in React Native.
- Group utilities by function: layout (`flex`, `items-center`), spacing (`px-4`, `py-2`), typography (`text-lg`), color (`bg-blue-600`).
- Avoid inline styles unless dynamic; define shared components in `frontend/components/ui/`.
- Use `clsx` for conditional classes.
- Ensure mobile-first design for 6"â€“7" screens with responsive breakpoints.

## Performance
- Ensure critical screens (e.g., Artisan dashboard, rider heatmap) load in <500ms.
- Use `React.memo` for expensive components.
- Implement `React.lazy` and `Suspense` for non-critical screens.
- Optimize images (WebP, CDN delivery).
- Monitor errors/performance with Sentry/LogRocket (optional).

## UI/UX
- Implement global bottom navigation: Dashboard, Stable, Competitions, World, Search, Chat.
- Add animated trait reveal via card flip (use `react-native-reanimated`).
- Support filter tray, pagination, and batch actions for Stable list.
- Reference `@docs/003_ui_ux_guidelines.mdc` for design details.

## Testing
- Use Jest and React Native Testing Library (RNTL) for unit/UI tests.
- Write tests for rendering, interactions, and edge cases before implementation.
- Mock API calls and Context providers.
- Run `npm run test:frontend` (Jest) before committing.

## Incremental Development
- Implement one component or screen at prompt; avoid unrelated changes.
- Write Jest/RNTL tests first, then code, then run tests.
- Validate against `@docs/008_frontendcoding.mdc` and `@docs/003_ui_ux_guidelines.mdc`.
- Clarify ambiguous prompts with the developer.

## References
- @docs/001_project_overview.mdc
- @docs/003_ui_ux_guidelines.mdc
- @docs/007_frameworks.mdc
- @docs/008_frontendcoding.mdc





- @tailwind.config.js