---
description: 
globs: 
alwaysApply: false
---
---
description: General coding standards for the Equoria mobile-first horse simulation game
globs: ["**/*.js", "**/*.jsx"]
alwaysApply: true
---
# General Coding Standards

## Project Context
- Equoria is a mobile-first horse simulation game for iOS and Android, built with React Native, Node.js/Express, PostgreSQL (JSONB), and Tailwind CSS.
- Monetization: Free-to-play with in-app purchases for cosmetics, trait analysis, premium riders, and seasonal events.
- Reference `@docs/001_project_overview.mdc` for project scope and `@docs/002_tech_stack.mdc` for stack details.

## Code Quality
- Use ES6+ syntax (arrow functions, `let`/`const`, template literals).
- Follow clean code principles: readable, maintainable, modular code.
- Use descriptive names (e.g., `HorseProfile` for components, `calculatePhenotype` for functions).
- Keep functions ≤40 lines and files ≤200 lines; split large components into reusable children.

## Error Handling
- Use try-catch for async operations (e.g., API calls, database queries).
- Log errors with `winston`, including file, function, and input context.
- Return JSON responses: `{ success: boolean, data: any, error: string | null }`.

## Security
- Validate/sanitize inputs using `express-validator` or `zod` to prevent XSS, SQL injection.
- Use `helmet` for secure headers and `express-rate-limit` for rate limiting.
- Store sensitive data in `.env` (e.g., `DATABASE_URL`); access via `process.env`.
- Follow OWASP guidelines (e.g., JWT validation, CSRF protection).

## Performance
- Optimize for mobile (6"–7" screens): load critical screens (e.g., Artisan dashboard, rider heatmap) in <500ms.
- Use lazy loading (`React.lazy`, `Suspense`) for non-critical components.
- Serve static assets (e.g., images in WebP) via CDN.
- Monitor performance with Sentry/LogRocket (optional) and `pg_stat_statements` for database queries.

## Testing
- Follow TDD: Write Jest/RNTL tests before implementation for all features.
- Unit tests for utilities, genetics (`determinePhenotype`), and UI components (100% coverage).
- Integration tests for API endpoints using Supertest and `.env.test` for isolated DB.
- Run `npm run test` (Jest, Mocha, or `pgtest`) before committing.

## Version Control
- Use GitHub branches: `feature/`, `bugfix/`, `test/`.
- Follow Conventional Commits (e.g., `feat: add horse profile screen`).
- All PRs must pass ESLint, Prettier, and test suite via GitHub Actions.
- Update `/docs` with new modules or features.

## References
- @docs/001_project_overview.mdc
- @docs/002_tech_stack.mdc
- @docs/007_frameworks.mdc

- @docs/009_testing_and_tdd.mdc