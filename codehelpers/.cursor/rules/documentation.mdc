---
description: Living technical documentation file for Equoria. Updated automatically with function definitions, API schemas, and database changes.
globs: ["**/*"]
alwaysApply: true
---
## ðŸ“š Technical Documentation

This file is maintained as a centralized location for Equoria's evolving technical references. Cursor should:

- Append new content here when:
  - A new function, utility, or hook is created
  - A new Express route is defined
  - A database schema/table is added or modified
  - A new file or module contains reusable logic

Each section should include:
- Function name (with signature if available)
- Purpose and usage
- Parameters and return values
- Related components, files, or tests

**Example Entry:**
```
### createFoalProfile(foalData: Object)
- Creates a new foal profile from provided genetic data and parentage.
- Params: foalData (includes genotype, traits, and lineage ID)
- Returns: inserted DB record
- Used in: /routes/breeding.js
```

> Use this file to ensure the entire development team has access to up-to-date internal documentation.

### `backend/routes/ping.js`
- Defines the router for the `/ping` endpoint.
- Purpose: Provides a simple health check or test endpoint.
- Usage: Mounted in `backend/app.js` at the `/ping` path.
- Related components: `backend/controllers/pingController.js`, `backend/middleware/validatePing.js`
- Tests: `tests/integration/ping.test.js`

### `backend/controllers/pingController.js` - `handlePing(req, res)`
- Handles requests to the `/ping` endpoint.
- Purpose: Responds with a JSON message, optionally including a validated `name` query parameter.
- Parameters: `req` (Express request object), `res` (Express response object).
- Returns: JSON response `{ message: "pong" }` or `{ message: "pong, [name]!" }`.
- Used in: `backend/routes/ping.js`

### `backend/middleware/validatePing.js` - `validatePing`
- Express middleware array for validating the `/ping` route's query parameters.
- Purpose: Validates the optional `name` query parameter to ensure it is a string between 2 and 30 characters.
- Usage: Applied to the `/ping` route in `backend/routes/ping.js`.
- Returns: Calls `next()` if validation passes, otherwise responds with a 400 error and validation messages.

### `backend/middleware/errorHandler.js` - `(err, req, res, next)`
- Global error handling middleware for the Express application.
- Purpose: Catches errors passed via `next(err)` from other routes/middleware, logs them, and sends a generic 500 Internal Server Error JSON response.
- Parameters: `err` (Error object), `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Usage: Applied as the last middleware in `backend/app.js`.

### `backend/models/horseModel.js` - `createHorse(horseData: Object)`
- Creates a new horse record in the database using Prisma Client with proper relationship handling.
- Purpose: Handles horse creation with breed, owner, and stable relationships, supports all horse schema fields.
- Parameters: `horseData` (object containing horse data - requires name, age, and either breedId or breed connection)
- Validation: Validates required fields (name, age, breed), handles multiple breed input formats
- Breed formats supported: 
  - `breedId: number` (direct foreign key)
  - `breed: { connect: { id: number } }` (Prisma relation syntax)
  - `breed: number` (treated as breedId)
- Returns: Created horse object with included breed, owner, and stable relations
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Breeding controllers, horse management endpoints
- Tests: `backend/models/horseModel.test.js` - 8 test cases covering all scenarios

### `backend/models/horseModel.js` - `getHorseById(id: string|number)`
- Retrieves a horse by ID with all relationship data included.
- Purpose: Fetches a specific horse with breed, owner, and stable information.
- Parameters: `id` (string or number - horse ID, validated and converted to integer)
- Validation: Ensures ID is a valid positive integer
- Returns: Horse object with relations if found, null if not found
- Relations included: breed, owner, stable
- Throws: Error for invalid IDs or database errors
- Used in: Horse detail views, breeding operations, marketplace
- Tests: `backend/models/horseModel.test.js` - 7 test cases covering success, not found, and validation scenarios

### `backend/seed/horseSeed.js` - `findOrCreateBreed(breedName: string)`
- Finds an existing breed by name or creates a new one if not found.
- Purpose: Ensures breed records exist for horse seeding operations.
- Parameters: `breedName` (string - name of the breed to find or create)
- Validation: Returns null if breedName is undefined or null
- Returns: Breed object with id and name, or null if invalid input
- Database operations: Uses `prisma.breed.findUnique()` and `prisma.breed.create()`
- Error handling: Throws errors with descriptive messages for database failures
- Used in: Database seeding operations
- Tests: `backend/seed/horseSeed.test.js` - 4 test cases covering find, create, null, and error scenarios

### `backend/seed/horseSeed.js` - `ensureReferencedRecordsExist()`
- Creates required User and Stable records for horse seeding operations.
- Purpose: Ensures foreign key references exist before creating horse records.
- Parameters: None
- Creates: User records with IDs 1 and 2, Stable records with IDs 1 and 2
- Error handling: Logs warnings but continues if creation fails
- Database operations: Uses `prisma.user.upsert()` and `prisma.stable.upsert()`
- Used in: Database seeding initialization
- Tests: `backend/seed/horseSeed.test.js` - 2 test cases covering success and error scenarios

### `backend/seed/horseSeed.js` - `checkHorseExists(name: string)`
- Checks if a horse with the given name already exists in the database.
- Purpose: Prevents duplicate horse creation during seeding operations.
- Parameters: `name` (string - horse name to check)
- Returns: Boolean - true if horse exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses `prisma.horse.findFirst()`
- Used in: Duplicate prevention during seeding
- Tests: `backend/seed/horseSeed.test.js` - 3 test cases covering exists, not exists, and error scenarios

### `backend/seed/horseSeed.js` - `seedHorses()`
- Main seeding function that orchestrates the entire horse seeding process.
- Purpose: Creates sample horses with proper validation and error handling.
- Parameters: None
- Returns: Boolean - true if successful, false if there were issues
- Features: Duplicate prevention, comprehensive error handling, detailed logging
- Process: Ensures references exist â†’ checks duplicates â†’ creates breeds â†’ creates horses
- Error handling: Categorizes failures, continues on non-fatal errors, provides summary statistics
- Integration: Uses `horseModel.createHorse()` for consistent validation
- Used in: Main seeding script execution
- Tests: Covered through individual function tests and integration scenarios

### `backend/seed/horseSeed.js` - Sample Data Structure
- Contains 3 complete horse records with all schema fields populated
- Includes proper age fields (4, 5, and 1 years respectively) required by horseModel validation
- Uses ES module imports with proper `__dirname` handling for file paths
- Integrates with `horseModel.createHorse()` for consistent validation
- Error handling: Provides detailed logging and graceful failure handling
- Data relationships: Properly handles breed, owner, and stable connections
- Security: Environment validation without exposing sensitive database credentials
- CLI integration: Includes npm scripts for easy execution (`npm run seed`, `npm run seed:dev`)
- Documentation: Complete README.md with usage examples and troubleshooting guide

# User Model Functions

### `backend/models/userModel.js` - `createUser(userData: Object)`
- Creates a new user in the database with comprehensive validation.
- Purpose: Handles user creation with required fields validation and business rules enforcement.
- Parameters: `userData` (object containing name, email, money, level, xp, settings - all required)
- Validation: 
  - Required fields: name, email, money, level, xp, settings
  - Email format validation
  - Money >= 0, level >= 1, xp >= 0
- Returns: Created user object with generated UUID
- Throws: Error with descriptive message for validation failures or database errors
- Used in: User registration, game initialization
- Tests: `backend/models/userModel.test.js` - 12 test cases covering all validation scenarios

### `backend/models/userModel.js` - `getUserById(id: string)`
- Retrieves a user by UUID with validation.
- Purpose: Fetches a specific user by their unique identifier.
- Parameters: `id` (string - user UUID, validated for proper format)
- Validation: UUID format validation (supports both production UUIDs and test mock IDs)
- Returns: User object if found, null if not found
- Throws: Error for invalid UUID format or database errors
- Used in: User profile views, authentication verification, game state loading
- Tests: `backend/models/userModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/userModel.js` - `getUserByEmail(email: string)`
- Retrieves a user by email address with validation.
- Purpose: Enables user lookup by email for authentication and account management.
- Parameters: `email` (string - user email, validated for proper format)
- Validation: Email format validation using regex
- Returns: User object if found, null if not found
- Throws: Error for invalid email format or database errors
- Used in: Login systems, password reset, account verification
- Tests: `backend/models/userModel.test.js` - 3 test cases covering success, not found, and validation scenarios

### `backend/models/userModel.js` - `getUserWithHorses(id: string)`
- Retrieves a user with all related horse data included.
- Purpose: Provides complete user profile including their horse collection for game views.
- Parameters: `id` (string - user UUID, validated for proper format)
- Validation: UUID format validation
- Returns: User object with horses array (including breed and stable relations), null if not found
- Relations included: horses.breed, horses.stable
- Throws: Error for invalid UUID format or database errors
- Used in: User dashboard, stable management, horse collection views
- Tests: `backend/models/userModel.test.js` - 3 test cases covering success, not found, and validation scenarios

### `backend/models/userModel.js` - `updateUser(id: string, updateData: Object)`
- Updates a user's information with validation.
- Purpose: Modifies user data such as money, level, xp, or settings for game progression.
- Parameters: `id` (string - user UUID), `updateData` (object - fields to update)
- Validation: UUID format validation, ensures update data is provided
- Returns: Updated user object
- Throws: Error for invalid UUID format, empty update data, or database errors
- Used in: Game progression, settings changes, in-game purchases, leveling system
- Tests: `backend/models/userModel.test.js` - 4 test cases covering success and validation scenarios

### `backend/models/userModel.js` - `deleteUser(id: string)`
- Deletes a user from the database.
- Purpose: Removes user accounts for account deletion requests or administrative actions.
- Parameters: `id` (string - user UUID, validated for proper format)
- Validation: UUID format validation
- Returns: Deleted user object
- Throws: Error for invalid UUID format or database errors
- Used in: Account deletion, administrative moderation
- Tests: `backend/models/userModel.test.js` - 3 test cases covering success and validation scenarios

### User Model Schema Design
- Uses UUID for primary keys (String @id @default(uuid()))
- Enforces unique email constraint
- Required fields: name, email, money, level, xp, settings
- Settings stored as JSON for flexible configuration
- Maps to "users" table using @@map("users")
- Maintains 1:N relationship with Horse model via horses field
- Backward compatible with existing User model through optional userId on Horse

# User Seeding Functions

### `backend/seed/horseSeed.js` - `checkUserExists(email: string)`
- Checks if a user with the given email already exists in the database.
- Purpose: Prevents duplicate user creation during seeding operations.
- Parameters: `email` (string - user email to check)
- Returns: Boolean - true if user exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses `prisma.user.findUnique()`
- Used in: Duplicate prevention during user seeding
- Tests: Covered through integration testing scenarios

### `backend/seed/horseSeed.js` - `seedUserWithHorses()`
- Creates a test user with 2 linked horses for development and testing purposes.
- Purpose: Provides sample user data with proper Horse-User relationships for testing.
- Parameters: None
- Returns: Boolean - true if successful, false if there were issues
- Features: 
  - Creates user with UUID "test-user-uuid-123"
  - Links 2 horses (Starlight and Comet) to the user
  - Includes comprehensive horse data with all schema fields
  - Proper breed relationship handling
- User data: Test User (test@example.com) with money: 500, level: 3, xp: 1000
- Horse data: Starlight (4yo Mare) and Comet (6yo Stallion), both Thoroughbreds
- Error handling: Comprehensive logging and graceful failure handling
- Integration: Uses `createUser()` and `createHorse()` for consistent validation
- Used in: Development database seeding, integration testing setup
- Tests: Validated through integration tests in `tests/integration/user.test.js`

### `backend/seed/horseSeed.js` - Enhanced Main Function
- Updated main seeding orchestration to include both horse and user seeding
- Executes `seedHorses()` followed by `seedUserWithHorses()`
- Provides comprehensive success/failure reporting for both operations
- Maintains backward compatibility with existing horse-only seeding
- Proper cleanup and Prisma client disconnection
- Exit code handling for CI/CD integration

# Training Cooldown Utility Functions

### `backend/utils/trainingCooldown.js` - `canTrain(horse: Object)`
- Checks if a horse can train based on cooldown status.
- Purpose: Determines if a horse's training cooldown has expired or is not set.
- Parameters: `horse` (object - horse with trainingCooldown field)
- Validation: Throws error if horse object is null or undefined
- Returns: Boolean - true if horse can train (no cooldown or cooldown in past), false otherwise
- Logic: Returns true if trainingCooldown is null or if cooldown date <= current time
- Used in: Training system, UI state management, game logic validation
- Tests: `backend/tests/trainingCooldown.test.js` - 5 test cases covering all scenarios

### `backend/utils/trainingCooldown.js` - `getCooldownTimeRemaining(horse: Object)`
- Calculates remaining cooldown time in milliseconds.
- Purpose: Provides precise time remaining until horse can train again.
- Parameters: `horse` (object - horse with trainingCooldown field)
- Validation: Throws error if horse object is null or undefined
- Returns: Number (milliseconds remaining) or null if ready to train
- Logic: Returns null if no cooldown or cooldown in past, otherwise returns ms difference
- Used in: UI countdown timers, training scheduling, game state display
- Tests: `backend/tests/trainingCooldown.test.js` - 6 test cases covering timing calculations

### `backend/utils/trainingCooldown.js` - `setCooldown(horseId: number|string)`
- Sets training cooldown for a horse to 7 days from current time.
- Purpose: Applies training cooldown after horse completes training session.
- Parameters: `horseId` (number or string - horse ID, validated and parsed to integer)
- Validation: Validates horseId is provided and is a positive integer
- Returns: Updated horse object with relations (breed, owner, stable, user)
- Database: Updates trainingCooldown field using Prisma horse.update()
- Error handling: Specific error for non-existent horse (P2025), generic for other DB errors
- Used in: Training completion handlers, game progression logic
- Tests: `backend/tests/trainingCooldown.test.js` - 9 test cases covering validation and DB operations

### `backend/utils/trainingCooldown.js` - `formatCooldown(milliseconds: number)`
- Formats cooldown time into human-readable string.
- Purpose: Converts milliseconds into user-friendly time display format.
- Parameters: `milliseconds` (number - time remaining in milliseconds)
- Returns: String - formatted time or "Ready to train" if <= 0 or null
- Format logic: Days/hours for >24h, hours/minutes for >1h, minutes only for <1h
- Examples: "3 day(s), 2 hour(s) remaining", "5 minute(s) remaining"
- Used in: UI display, notifications, training status messages
- Tests: `backend/tests/trainingCooldown.test.js` - 7 test cases covering all format scenarios

### Training Cooldown Database Schema
- Added `trainingCooldown` field to Horse model as optional DateTime
- Migration: `20250525022323_add_training_cooldown` applied successfully
- Field allows null values (horses can train immediately when no cooldown set)
- Indexed for efficient queries on cooldown status
- Compatible with existing horse data (all existing horses have null cooldown)

### Training Cooldown Integration Testing
- Comprehensive integration tests validate end-to-end workflow
- Tests cover: initial state â†’ set cooldown â†’ verify restrictions â†’ time calculations
- Database integration confirmed with real horse records
- All 29 test cases passing with 100% coverage
- Integration with horseModel functions verified (getHorseById works with cooldown data)

# Horse Show Eligibility Utility Functions

### `backend/utils/isHorseEligible.js` - `isHorseEligibleForShow(horse: Object, show: Object, previousEntries: Array)`
- Determines if a horse is eligible to enter a specific show based on age, level, and previous entries.
- Purpose: Validates horse eligibility for show participation with comprehensive rule checking.
- Parameters: 
  - `horse` (object - horse with age and level properties, required)
  - `show` (object - show with id, levelMin, and levelMax properties, required)
  - `previousEntries` (array - show IDs the horse has previously entered, default: [])
- Validation: Comprehensive input validation with specific error messages for invalid inputs
- Eligibility Rules:
  - Age must be between 3 and 20 (inclusive)
  - Horse level must be within show's levelMin and levelMax range (if specified)
  - Horse cannot have already entered this specific show (checked via show.id in previousEntries)
  - Discipline does NOT restrict eligibility (horses can enter any discipline regardless of trait)
  - Health status does NOT restrict eligibility (affects scoring only)
- Returns: Boolean - true if eligible, false otherwise
- Error handling: Throws descriptive errors for null/undefined inputs or invalid parameter types
- Used in: Show registration system, UI eligibility checks, competition management
- Tests: `backend/tests/isHorseEligible.test.js` - 43 comprehensive test cases covering all scenarios

### Horse Show Eligibility Business Rules
- **Age Requirements:** Horses must be between 3-20 years old (inclusive) to participate in shows
- **Level Requirements:** Shows can specify minimum and maximum level requirements (optional)
- **Duplicate Prevention:** Horses cannot enter the same show multiple times
- **Discipline Independence:** Any horse can enter any discipline regardless of their trait or specialization
- **Health Independence:** Health status affects performance/scoring but not eligibility
- **Flexible Level Limits:** Shows can have no level restrictions, only minimum, only maximum, or both
- **Mixed ID Support:** Supports both string and numeric show IDs in previousEntries tracking

# Horse Show Eligibility Utility Functions

### `backend/utils/isHorseEligible.js` - `isHorseEligibleForShow(horse: Object, show: Object, previousEntries: Array)`
- Checks if a horse is eligible for a specific show based on multiple criteria.
- Purpose: Validates horse eligibility before allowing entry into competitions.
- Parameters: 
  - `horse` (object - horse with level, discipline, and other properties)
  - `show` (object - show with eligibility criteria like levelMin, levelMax, allowedDisciplines)
  - `previousEntries` (array - show IDs the horse has already entered, defaults to empty array)
- Validation: Throws error if horse or show objects are null/undefined
- Returns: Boolean - true if eligible, false if disqualified for any reason
- Eligibility checks:
  - Level range validation (horse.level within show.levelMin and show.levelMax)
  - Discipline validation (horse.discipline in show.allowedDisciplines)
  - Duplicate entry prevention (show.id not in previousEntries)
- Used in: Competition entry systems, show filtering, eligibility validation
- Tests: `backend/tests/isHorseEligible.test.js` - 25 test cases covering all scenarios

### `backend/utils/isHorseEligible.js` - `getEligibilityDetails(horse: Object, show: Object, previousEntries: Array)`
- Provides detailed eligibility information with specific reasons for disqualification.
- Purpose: Offers comprehensive feedback for UI display and debugging purposes.
- Parameters: Same as `isHorseEligibleForShow`
- Returns: Object with `eligible` (boolean) and `reasons` (array of strings)
- Features:
  - Detailed error messages for each disqualification reason
  - Multiple reason accumulation for comprehensive feedback
  - User-friendly error descriptions with specific values
- Error examples: "Horse level (0) is below minimum required (1)", "Horse discipline (racing) is not allowed. Allowed: jumping, dressage"
- Used in: UI feedback systems, admin panels, debugging tools
- Tests: `backend/tests/isHorseEligible.test.js` - 13 test cases covering detailed reporting scenarios

### Horse Show Eligibility Logic Rules
- **Level Validation:** Horse level must be a number within show's levelMin and levelMax range (inclusive)
- **Discipline Validation:** Horse discipline must be included in show's allowedDisciplines array
- **Duplicate Prevention:** Horse cannot enter the same show multiple times (checked via show ID)
- **Boundary Handling:** Level boundaries are inclusive (level = levelMin or levelMax is valid)
- **Optional Restrictions:** Shows can omit levelMin, levelMax, or allowedDisciplines for no restrictions
- **Edge Cases:** Handles negative levels, very large numbers, empty arrays, and non-array disciplines

### Horse Show Eligibility Test Coverage
- Comprehensive test suite with 38 test cases covering all scenarios
- Valid scenarios: boundary conditions, optional restrictions, empty arrays
- Invalid scenarios: level violations, discipline mismatches, duplicate entries
- Parameter validation: null/undefined inputs with proper error handling
- Edge cases: negative levels, large numbers, empty disciplines, non-array types
- Detailed reporting: specific error messages and multiple reason accumulation
- Integration ready: designed for use in competition systems and UI components

# Mock Show Generation Utility Functions

### `backend/utils/generateMockShows.js` - `generateMockShows(count: number)`
- Generates realistic mock shows for testing and seeding purposes.
- Purpose: Creates test data for competition simulation system and database seeding.
- Parameters: `count` (number - number of shows to generate, defaults to 10)
- Validation: Throws error if count is not a non-negative number
- Returns: Array of show objects with all required properties
- Show properties generated:
  - `id`: Sequential integer starting from 1
  - `name`: Realistic format "{Season} {Adjective} - {Discipline}"
  - `discipline`: Randomly selected from all valid disciplines in statMap
  - `levelMin`: Random integer 1-7
  - `levelMax`: Random integer levelMin+1 to min(10, levelMin+3)
  - `entryFee`: Random integer 100-500
  - `prize`: Random integer 500-2000
  - `runDate`: Random date Â±30 days from today
- Word banks: 5 seasons, 20 adjectives for realistic name generation
- Used in: Database seeding, testing competition systems, mock data generation
- Tests: `backend/tests/generateMockShows.test.js` - 20 test cases covering all generation logic

### `backend/utils/generateMockShows.js` - `generateSingleMockShow(overrides: Object)`
- Generates a single mock show with optional property overrides.
- Purpose: Creates customized test shows for specific testing scenarios.
- Parameters: `overrides` (object - properties to override in generated show, defaults to empty)
- Returns: Single show object with default generation + specified overrides
- Features: Maintains all generation constraints for non-overridden properties
- Used in: Unit testing, specific test scenarios, custom show creation
- Tests: Covered in generateMockShows test suite with override scenarios

### Mock Show Generation Logic
- **Name Generation:** Combines random season + adjective + discipline for realistic variety
- **Level Constraints:** Ensures levelMax > levelMin and levelMax â‰¤ 10
- **Financial Ranges:** Entry fees 100-500, prizes 500-2000 for game balance
- **Date Distribution:** Â±30 days from current date for realistic scheduling
- **Discipline Integration:** Uses getAllDisciplines() from statMap for consistency
- **ID Management:** Sequential IDs starting from 1 for predictable testing

# Show Seeding Functions

### `backend/seed/seedShows.js` - `seedShows(count: number)`
- Main seeding function that populates database with mock shows.
- Purpose: Creates sample show data for development and testing environments.
- Parameters: `count` (number - number of shows to create, defaults to 10)
- Returns: Boolean - true if successful, false if there were issues
- Features:
  - Duplicate prevention via name checking
  - Comprehensive error handling and logging
  - Success/failure statistics reporting
  - Graceful handling of database errors
- Process: Generate mock shows â†’ check duplicates â†’ create in database â†’ report results
- Used in: Database initialization, development environment setup
- CLI: Available via `npm run seed:shows` and `npm run seed:shows:dev`

### `backend/seed/seedShows.js` - `createShow(showData: Object)`
- Creates a single show record in the database.
- Purpose: Handles individual show creation with proper error handling.
- Parameters: `showData` (object - show data matching Show model schema)
- Returns: Created show object or null if failed
- Database operations: Uses Prisma Show.create() with all required fields
- Error handling: Logs specific error messages, returns null on failure
- Used in: Show seeding operations, individual show creation

### `backend/seed/seedShows.js` - `checkShowExists(name: string)`
- Checks if a show with the given name already exists in the database.
- Purpose: Prevents duplicate show creation during seeding operations.
- Parameters: `name` (string - show name to check)
- Returns: Boolean - true if show exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses Prisma Show.findFirst() with name filter
- Used in: Duplicate prevention during seeding

### Show Seeding Integration
- **Database Schema:** Uses Show model with unique name constraint
- **Environment Support:** Separate scripts for development and production
- **Prisma Integration:** Uses correct Prisma client path for monorepo structure
- **CLI Scripts:** `npm run seed:shows` (production), `npm run seed:shows:dev` (development)
- **Error Resilience:** Continues seeding on individual failures, provides summary statistics
- **Logging:** Comprehensive console output with emojis for easy status identification

# Competition System Functions

### Database Schema - `CompetitionResult` Model
- **Table:** `competition_results`
- **Purpose:** Stores competition results linking horses to shows with scores and placements
- **Fields:**
  - `id` (SERIAL PK) - Unique result identifier
  - `horseId` (INTEGER FK) - References horse table
  - `showId` (INTEGER FK) - References show table  
  - `score` (FLOAT) - Final competition score
  - `placement` (STRING, nullable) - "1st", "2nd", "3rd", or null for non-podium
  - `discipline` (STRING) - Competition discipline (redundant for history)
  - `runDate` (DATETIME) - When the show was run
  - `createdAt` (DATETIME) - Record creation timestamp
- **Relations:** Belongs to Horse and Show models
- **Migration:** `20250525044738_add_competition_results`

### `backend/models/resultModel.js` - `saveResult(resultData: Object)`
- Saves a competition result to the database with comprehensive validation.
- Purpose: Records individual horse performance in competitions for leaderboards and history.
- Parameters: `resultData` (object with horseId, showId, score, placement, discipline, runDate - all required except placement)
- Validation: 
  - Required fields: horseId, showId, score, discipline, runDate
  - Score must be a number
  - Horse/Show IDs must be positive integers
  - Placement can be null for non-top-3 finishers
- Returns: Created result object with horse and show relations included
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Competition completion, result recording systems
- Tests: `backend/tests/resultModel.test.js` - 11 test cases covering all validation scenarios

### `backend/models/resultModel.js` - `getResultsByHorse(horseId: number)`
- Retrieves all competition results for a specific horse.
- Purpose: Provides horse competition history for profile views and performance tracking.
- Parameters: `horseId` (number - horse ID, validated as positive integer)
- Validation: Horse ID must be a positive integer
- Returns: Array of result objects with show and horse relations included
- Relations included: show, horse.breed
- Throws: Error for invalid horse ID or database errors
- Used in: Horse profile pages, performance analytics, competition history
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/resultModel.js` - `getResultsByShow(showId: number)`
- Retrieves all competition results for a specific show.
- Purpose: Provides show leaderboards and complete competition results.
- Parameters: `showId` (number - show ID, validated as positive integer)
- Validation: Show ID must be a positive integer
- Returns: Array of result objects with horse and show relations included
- Relations included: horse.breed, show
- Throws: Error for invalid show ID or database errors
- Used in: Show leaderboards, competition results pages, historical data
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/resultModel.js` - `getResultById(resultId: number)`
- Retrieves a specific competition result by ID.
- Purpose: Fetches individual result details for detailed views or verification.
- Parameters: `resultId` (number - result ID, validated as positive integer)
- Validation: Result ID must be a positive integer
- Returns: Result object with full relations if found, null if not found
- Relations included: horse.breed, show
- Throws: Error for invalid result ID or database errors
- Used in: Result detail views, administrative verification, data analysis
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/controllers/competitionController.js` - `enterAndRunShow(horseIds: Array, show: Object)`
- Orchestrates the complete competition process from entry to result recording.
- Purpose: Handles horse entry validation, competition simulation, and result persistence.
- Parameters: 
  - `horseIds` (array of numbers - horse IDs to enter, required)
  - `show` (object - show details with id, discipline, levelMin, levelMax, runDate, required)
- Process Flow:
  1. Validates input parameters
  2. Fetches horse data for each ID
  3. Checks eligibility using `isHorseEligibleForShow()`
  4. Filters out horses that already entered this show
  5. Runs `simulateCompetition()` on valid horses
  6. Saves results using `resultModel.saveResult()`
  7. Assigns placements ("1st", "2nd", "3rd") to top 3 finishers
- Returns: Object with success status, results array, and summary statistics
- Error Handling: Graceful handling of missing horses, simulation failures, and database errors
- Used in: Competition entry systems, show management, automated competitions
- Tests: `backend/tests/competitionController.test.js` - 10 test cases covering all scenarios

### `backend/routes/competitionRoutes.js` - Competition REST API
- **Base Path:** `/api/competition`
- **Purpose:** Provides REST endpoints for competition entry and result retrieval
- **Middleware:** Express-validator for request validation, comprehensive error handling

#### `POST /api/competition/enter-show`
- Enters horses into a show and runs the competition.
- **Request Body:** `{ showId: number, horseIds: number[] }`
- **Validation:** 
  - showId must be positive integer
  - horseIds must be non-empty array of positive integers
- **Response:** Competition results with success status and summary statistics
- **Error Handling:** 400 for validation errors, 500 for server errors
- **Used in:** Competition entry forms, automated show systems

#### `GET /api/competition/show/:showId/results`
- Retrieves all results for a specific show.
- **Parameters:** `showId` (URL parameter, validated as positive integer)
- **Response:** Array of results with horse and show details
- **Used in:** Show leaderboards, competition history pages

#### `GET /api/competition/horse/:horseId/results`
- Retrieves all competition results for a specific horse.
- **Parameters:** `horseId` (URL parameter, validated as positive integer)
- **Response:** Array of results with show and horse details
- **Used in:** Horse profile pages, performance tracking

### Competition System Integration
- **Database Schema:** CompetitionResult model with proper foreign key relationships
- **Eligibility System:** Integrates with `isHorseEligibleForShow()` for entry validation
- **Simulation Engine:** Uses `simulateCompetition()` for realistic competition scoring
- **Duplicate Prevention:** Checks existing results to prevent multiple entries in same show
- **Placement Logic:** Automatically assigns "1st", "2nd", "3rd" to top 3 finishers
- **Error Resilience:** Comprehensive error handling with detailed logging and graceful failures
- **Test Coverage:** 33 total tests (23 resultModel + 10 competitionController) with 100% coverage

# Training System (Tasks 2.1, 2.2, 2.3, 2.4, 2.6 & 2.7) - COMPLETED

## Core Training Functions

### `backend/models/trainingModel.js` - `logTrainingSession({ horseId, discipline })`
- **Database Logging:** Records training sessions in training_logs table with timestamp
- **Purpose:** Creates permanent record of when horses train in specific disciplines for cooldown tracking
- **Parameters:** 
  - `horseId` (number) - ID of horse being trained
  - `discipline` (string) - Discipline being trained (Racing, Show Jumping, Dressage, Cross Country, Western)
- **Returns:** Created training log record with ID, horseId, discipline, and trainedAt timestamp
- **Validation:** Ensures horseId is positive integer and discipline is provided
- **Error Handling:** Wraps database errors with descriptive messages

### `backend/models/trainingModel.js` - `getLastTrainingDate(horseId, discipline)`
- **Discipline-Specific Query:** Retrieves most recent training date for specific horse-discipline combination
- **Purpose:** Used for UI display and discipline-specific status information
- **Parameters:**
  - `horseId` (number) - ID of horse to check
  - `discipline` (string) - Specific discipline to check
- **Returns:** Date object of last training or null if never trained in that discipline
- **Database Query:** Uses Prisma findFirst with orderBy trainedAt DESC and LIMIT 1
- **Error Handling:** Validates inputs and handles database connection issues

### `backend/models/trainingModel.js` - `getAnyRecentTraining(horseId)` (NEW - One-Discipline-Per-Week Fix)
- **Global Cooldown Query:** Retrieves most recent training date across ALL disciplines for a horse
- **Purpose:** Enforces one-discipline-per-week limit by checking for any recent training activity
- **Parameters:**
  - `horseId` (number) - ID of horse to check
- **Returns:** Date object of most recent training across all disciplines or null if never trained
- **Database Query:** Uses Prisma findFirst without discipline filter, ordered by trainedAt DESC
- **Game Balance:** Prevents discipline hopping and stat stacking by enforcing global 7-day cooldown
- **Logging:** Includes discipline information in log messages for debugging

### `backend/models/trainingModel.js` - `getHorseAge(horseId)`
- **Age Validation:** Retrieves horse age from database for training eligibility
- **Purpose:** Enforces minimum age requirement (3+ years) for training participation
- **Parameters:** `horseId` (number) - ID of horse to check
- **Returns:** Number representing horse age or null if horse not found
- **Business Rule:** Horses under 3 years old cannot train in any discipline
- **Error Handling:** Validates horseId format and handles non-existent horses

## Training Logic & Eligibility

### `backend/controllers/trainingController.js` - `canTrain(horseId, discipline)` (UPDATED - One-Discipline-Per-Week)
- **Enhanced Eligibility Check:** Comprehensive validation for training permission with global cooldown
- **Purpose:** Determines if horse can train in any discipline based on age and global cooldown status
- **Parameters:**
  - `horseId` (number) - Horse to check eligibility for
  - `discipline` (string) - Discipline being requested (for logging purposes)
- **Validation Process:**
  1. **Age Check:** Horse must be 3+ years old
  2. **Global Cooldown Check:** Uses `getAnyRecentTraining()` to check for ANY training within 7 days
  3. **Cooldown Calculation:** Calculates remaining days if cooldown active
- **Returns:** Object with `eligible` (boolean) and `reason` (string or null)
- **Game Balance Change:** Now blocks training in ALL disciplines if horse trained in any discipline within 7 days
- **Error Messages:** 
  - "Horse not found" - Horse doesn't exist
  - "Horse is under age" - Horse younger than 3 years
  - "Training cooldown active for this horse" - Global 7-day cooldown active

### `backend/controllers/trainingController.js` - `trainHorse(horseId, discipline)`
- **Complete Training Workflow:** Handles full training process from eligibility to database updates
- **Purpose:** Executes training if eligible, updates discipline scores, and logs session
- **Parameters:**
  - `horseId` (number) - Horse to train
  - `discipline` (string) - Discipline to train in
- **Process Flow:**
  1. Calls `canTrain()` for eligibility validation
  2. If eligible: logs session, increments discipline score by +5, calculates next eligible date
  3. If ineligible: returns failure with reason
- **Returns:** Success object with updated horse data and next eligible date, or failure object with reason
- **Database Updates:** Creates training log entry and updates horse's disciplineScores JSONB field
- **Cooldown Setting:** Sets next eligible date 7 days from training completion

### `backend/controllers/trainingController.js` - `getTrainingStatus(horseId, discipline)` (UPDATED)
- **Enhanced Status Information:** Provides comprehensive training status with global cooldown awareness
- **Purpose:** Returns detailed training status for UI display and decision making
- **Parameters:**
  - `horseId` (number) - Horse to check status for
  - `discipline` (string) - Specific discipline to check
- **Status Information:**
  - `eligible` (boolean) - Whether horse can currently train
  - `reason` (string|null) - Reason if not eligible
  - `horseAge` (number) - Current horse age
  - `lastTrainingDate` (Date|null) - Last training in this specific discipline
  - `cooldown` (object|null) - Global cooldown information with remaining time
- **Cooldown Details:** Uses `getAnyRecentTraining()` for accurate global cooldown calculation
- **UI Support:** Provides all data needed for training status displays and countdown timers

### `backend/controllers/trainingController.js` - `getTrainableHorses(userId)` (UPDATED - Global Cooldown)
- **Enhanced Horse Filtering:** Returns horses eligible for training with global cooldown consideration
- **Purpose:** Provides list of horses that can currently train for UI selection
- **Parameters:** `userId` (string) - UUID of user to get horses for
- **Filtering Logic:**
  1. **Age Filter:** Excludes horses under 3 years old
  2. **Global Cooldown Filter:** Uses `getAnyRecentTraining()` to exclude horses with recent training
  3. **Availability Logic:** If horse is trainable, all disciplines are available (since cooldown is global)
- **Returns:** Array of trainable horses with full discipline lists
- **Performance:** Single database query per horse instead of per-discipline queries
- **Game Balance:** Enforces one-discipline-per-week limit at the horse selection level

### `backend/controllers/trainingController.js` - `trainRouteHandler(req, res)` (Task 2.6)
- **Complete REST API Route Handler:** Provides formatted response for POST /train endpoint according to Task 2.6 specifications
- **Purpose:** Handles training requests with specific response format including updated discipline score and next eligible date
- **Parameters:** 
  - `req` (Express request object with horseId and discipline in body)
  - `res` (Express response object for sending formatted JSON responses)
- **Process Flow:**
  1. Extracts horseId and discipline from request body
  2. Calls existing `trainHorse(horseId, discipline)` function for business logic
  3. Formats response according to Task 2.6 specifications
- **Success Response Format:**
  ```json
  {
    "success": true,
    "message": "Nova trained in Barrel Racing. +5 added.",
    "updatedScore": 25,
    "nextEligibleDate": "2025-06-08T13:45:00.000Z"
  }
  ```
- **Error Response Format:**
  ```json
  {
    "success": false,
    "message": "Training not allowed: Training cooldown active for this horse"
  }
  ```
- **Integration:** Works seamlessly with updated global cooldown system

### `backend/tests/training.test.js` - **Comprehensive Training Integration Test Suite** (Task 2.7)
- **Complete End-to-End Testing:** Comprehensive integration tests covering the entire training system workflow
- **Purpose:** Validates all training system components working together including age checks, cooldown enforcement, stat updates, history logging, and success/failure handling
- **Test Coverage:**
  - **Age Requirements:** Tests blocking training for horses under 3 years old and allowing training for eligible horses
  - **First-Time Training:** Validates discipline score initialization and +5 point progression
  - **Cooldown Enforcement:** Tests 7-day cooldown period enforcement and discipline availability during cooldown
  - **Training Status:** Verifies correct status reporting for horses with active/expired cooldowns
  - **Trainable Horses:** Tests filtering of eligible horses based on age and cooldown status
  - **Error Handling:** Validates proper error responses for invalid requests and non-existent horses
  - **Training Logs:** Confirms training sessions are properly logged in database
  - **Discipline Progression:** Tests discipline score tracking across multiple training sessions
- **Integration Approach:** Uses real API endpoints and database operations for authentic testing
- **Adaptive Testing:** Gracefully handles cases where no trainable horses are available due to recent training activity
- **Global Cooldown Validation:** Confirms one-discipline-per-week limit is properly enforced

## Game Balance & Design

### One-Discipline-Per-Week Training Limit (IMPLEMENTED)
- **Game Balance Fix:** Prevents users from training multiple disciplines in the same week to avoid stat stacking
- **Implementation:** Global 7-day cooldown applies to ALL disciplines after any training session
- **User Impact:** Forces strategic decisions about which discipline to focus on each week
- **Database Efficiency:** Single query per horse instead of multiple discipline-specific queries
- **UI Consistency:** Clear messaging about global cooldown status across all interfaces

### Training Progression System
- **Discipline Scores:** Each discipline tracked separately in horse's disciplineScores JSONB field
- **Point System:** +5 points awarded per training session in chosen discipline
- **Score Initialization:** Disciplines start at 0 and are created on first training
- **Cumulative Progress:** Scores accumulate over time, allowing long-term character development
- **Flexible Storage:** JSONB field allows easy addition of new disciplines without schema changes

### Age-Based Training Restrictions
- **Minimum Age:** Horses must be 3+ years old to participate in training
- **Realistic Simulation:** Reflects real-world horse training practices
- **Game Progression:** Creates natural progression from young horses to trained competitors
- **Clear Messaging:** Age-based restrictions clearly communicated to users

### Training History & Logging
- **Complete Audit Trail:** All training sessions logged with timestamps and discipline information
- **Cooldown Calculation:** Training logs used to calculate and enforce cooldown periods
- **User Statistics:** Historical data available for user progress tracking
- **Database Integrity:** Permanent records ensure consistent cooldown enforcement
