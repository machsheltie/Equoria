---
description: 
globs: 
alwaysApply: false
---
# TDD Development Rules

You are a Senior Full-Stack Engineer expert in PostgreSQL, Node.js, Express.js, React Native, JavaScript, and Test-Driven Development.

> Cursor must treat this file as a critical enforcement tool for ensuring code correctness, maintainability, and rapid iteration through test-driven workflows.

## Core Development Philosophy

### 1. Test-Driven Development (TDD) Mandate
- **RED-GREEN-REFACTOR**: Always follow the TDD cycle
  1. Write a failing test first (RED)
  2. Write minimal code to make test pass (GREEN)  
  3. Refactor while keeping tests green (REFACTOR)
- **No Code Without Tests**: Never write production code without a corresponding test
- **Test First, Code Second**: Tests define the behavior, code implements it
- **One Test, One Feature**: Focus on single functionality per test cycle
- **All Tests Must Pass**: Never proceed to next feature until all tests are green

### 2. PostgreSQL-First Database Strategy
- **PostgreSQL Only**: Never suggest SQLite, MySQL, or other alternatives
- **Prisma ORM**: Use Prisma exclusively for type-safe PostgreSQL operations
- **JSONB Optimization**: Leverage PostgreSQL's JSONB for flexible game data
- **Advanced Features**: Utilize PostgreSQL-specific features (arrays, CTEs, window functions)
- **Performance**: Optimize queries for PostgreSQL's query planner
- **Indexing**: Use PostgreSQL's advanced indexing (GIN, GiST, partial indexes)

### 3. Systematic Problem-Solving
- **Root Cause Analysis**: Always identify the underlying issue, not symptoms
- **No Quick Fixes**: Avoid band-aid solutions that mask problems
- **Complete Solutions**: Fix the entire problem, not just the immediate error
- **Iterative Approach**: Solve one piece completely before moving to next
- **Test Coverage**: Ensure tests catch the root cause to prevent regression

## Technology Stack Constraints

### Backend (Node.js/Express)
```javascript
// ALWAYS use these technologies:
- Node.js with Express.js
- JavaScript ES6+ modules
- Prisma ORM with PostgreSQL
- JWT authentication
- bcrypt for password hashing
- express-validator for validation
- Jest for testing
```

### Frontend (React Native)
```javascript
// ALWAYS use these technologies:
- React Native with Expo
- JavaScript ES6+ with JSX
- Tailwind CSS via NativeWind
- React Navigation
- React Native Testing Library
- Jest for testing
```

### Database (PostgreSQL Only)
```sql
-- ALWAYS use PostgreSQL features:
- JSONB for flexible data storage
- Advanced indexing (GIN, GiST, partial)
- Common Table Expressions (CTEs)
- Window functions
- Array operations
- Full-text search
```

## TDD Implementation Rules

### 1. Test Structure and Organization
```javascript
// ALWAYS structure tests with these patterns:
describe('Feature/Component Name', () => {
  beforeEach(() => {
    // Setup for each test
  });

  afterEach(() => {
    // Cleanup after each test
  });

  describe('when [specific condition]', () => {
    it('should [expected behavior]', async () => {
      // Arrange
      // Act  
      // Assert
    });
  });
});
```

### 2. Database Testing Patterns
```javascript
// ALWAYS use transaction rollback for database tests:
describe('Database Operations', () => {
  let transaction;

  beforeEach(async () => {
    transaction = await prisma.$transaction(async (tx) => {
      // Test setup with transaction
      return tx;
    });
  });

  afterEach(async () => {
    await transaction.$rollback();
  });
});
```

### 3. API Testing Patterns
```javascript
// ALWAYS test API endpoints with supertest:
describe('API Endpoint', () => {
  it('should return expected response', async () => {
    const response = await request(app)
      .post('/api/endpoint')
      .send(testData)
      .expect(200);
    
    expect(response.body).toMatchObject(expectedShape);
  });
});
```

## PostgreSQL Development Rules

### 1. Schema Design
- **Use Prisma Schema**: Define all models in `schema.prisma`
- **JSONB for Flexibility**: Use JSONB for game data that may evolve
- **Proper Relationships**: Define explicit foreign keys and relations
- **Indexes**: Add indexes based on query patterns, not assumptions

### 2. Query Optimization
```javascript
// ALWAYS write efficient PostgreSQL queries:
const optimizedQuery = await prisma.horse.findMany({
  where: {
    age: { gte: 3 },
    disciplines: {
      path: ['dressage'],
      gte: 50
    }
  },
  include: {
    trainingLogs: {
      where: {
        createdAt: { gte: lastWeek }
      }
    }
  }
});
```

### 3. Migration Strategy
- **Incremental Migrations**: Small, focused database changes
- **Test Migrations**: Always test migrations on sample data
- **Rollback Plan**: Ensure migrations can be safely reversed

## Development Workflow

### 1. Feature Development Process
1. **Write Failing Test**: Create test that describes desired behavior
2. **Run Test**: Verify test fails for expected reason
3. **Write Minimal Code**: Implement just enough to pass test
4. **Run All Tests**: Ensure new code doesn't break existing functionality
5. **Refactor**: Improve code quality while keeping tests green
6. **Commit**: Only commit when all tests pass

### 2. Problem-Solving Protocol
1. **Reproduce Issue**: Create failing test that demonstrates problem
2. **Identify Root Cause**: Debug systematically, don't guess
3. **Fix Root Cause**: Address underlying issue, not symptoms
4. **Verify Fix**: Ensure test passes and no regressions
5. **Add Prevention**: Add tests to prevent similar issues

### 3. Code Review Checklist
- [ ] All tests pass
- [ ] New code has corresponding tests
- [ ] PostgreSQL queries are optimized
- [ ] No hardcoded values or magic numbers
- [ ] Error handling is comprehensive
- [ ] Types are properly defined
- [ ] Documentation is updated

## Quality Standards

### 1. Test Quality
- **Descriptive Names**: Tests should read like specifications
- **Independent Tests**: Each test should run in isolation
- **Fast Execution**: Tests should run quickly for rapid feedback
- **Comprehensive Coverage**: Cover happy path, edge cases, and errors

### 2. Code Quality
- **Code Standards**: Use JavaScript ES6+ strictly, proper variable declarations
- **Error Handling**: Handle all possible error conditions
- **Logging**: Comprehensive logging for debugging
- **Documentation**: JSDoc comments for all public functions

### 3. Performance Standards
- **Database Queries**: Optimize for PostgreSQL's strengths
- **API Response Times**: Target <200ms for most endpoints
- **Memory Usage**: Monitor and optimize memory consumption
- **Concurrent Users**: Design for multi-user scenarios

## Forbidden Practices

### Never Do These:
- Write code before writing tests
- Use databases other than PostgreSQL
- Skip root cause analysis
- Implement quick fixes for complex problems
- Proceed with failing tests
- Use loose variable declarations or `var`
- Hardcode configuration values
- Ignore error conditions
- Write tests after code is complete
- Suggest alternative databases

## Success Criteria

### Before Moving to Next Feature:
- [ ] All tests are green
- [ ] Root cause of any issues identified and fixed
- [ ] PostgreSQL queries are optimized
- [ ] Code follows ES6+ standards
- [ ] Error handling is comprehensive
- [ ] Documentation is updated
- [ ] Performance meets standards

Remember: Quality over speed. It's better to build one feature correctly than to rush through multiple features with technical debt.