name: 'Equoria CI/CD Pipeline'

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  DATABASE_URL: 'postgresql://test:test@localhost:5432/equoria_test'
  JWT_SECRET: 'test-jwt-secret-for-ci'
  JWT_REFRESH_SECRET: 'test-refresh-secret-for-ci'
  NODE_ENV: 'test'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            
      - name: 'Install Backend Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Frontend Dependencies'
        working-directory: ./frontend
        run: npm ci
        
      - name: 'Run ESLint (Backend)'
        working-directory: ./backend
        run: npm run lint
        
      - name: 'Run ESLint (Frontend)'
        working-directory: ./frontend
        run: npm run lint
        
      - name: 'Check Code Formatting (Backend)'
        working-directory: ./backend
        run: npm run format:check
        
      - name: 'Check Code Formatting (Frontend)'
        working-directory: ./frontend
        run: npm run format:check

  # Job 2: Database Setup and Migration Testing
  database-setup:
    name: 'Database Setup & Migration Testing'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: equoria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 'Install Backend Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Database Dependencies'
        working-directory: ./packages/database
        run: npm ci
        
      - name: 'Generate Prisma Client'
        working-directory: ./packages/database
        run: npx prisma generate --schema=prisma/schema.prisma
        
      - name: 'Run Database Migrations'
        working-directory: ./packages/database
        run: npx prisma migrate deploy --schema=prisma/schema.prisma
        
      - name: 'Validate Database Schema'
        working-directory: ./packages/database
        run: npx prisma validate --schema=prisma/schema.prisma
        
      - name: 'Test Database Connection'
        working-directory: ./packages/database
        run: node migrations/verify_migration.js
        
      - name: 'Seed Test Database'
        working-directory: ./backend
        run: npm run seed:test

  # Job 3: Backend Testing with Coverage
  backend-tests:
    name: 'Backend Tests & Coverage'
    runs-on: ubuntu-latest
    needs: [code-quality, database-setup]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: equoria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 'Install Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Database Dependencies'
        working-directory: ./packages/database
        run: npm ci
        
      - name: 'Setup Database'
        working-directory: ./packages/database
        run: |
          npx prisma generate --schema=prisma/schema.prisma
          npx prisma migrate deploy --schema=prisma/schema.prisma
          
      - name: 'Seed Test Database'
        working-directory: ./backend
        run: npm run seed:test
        
      - name: 'Run Backend Tests with Coverage'
        working-directory: ./backend
        run: npm run test:coverage
        
      - name: 'Upload Coverage Reports to Codecov'
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          
      - name: 'Upload Coverage Artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: ./backend/coverage/
          retention-days: 30

  # Job 4: Integration Tests
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: equoria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 'Install Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Database Dependencies'
        working-directory: ./packages/database
        run: npm ci
        
      - name: 'Setup Database'
        working-directory: ./packages/database
        run: |
          npx prisma generate --schema=prisma/schema.prisma
          npx prisma migrate deploy --schema=prisma/schema.prisma
          
      - name: 'Seed Test Database'
        working-directory: ./backend
        run: npm run seed:test
        
      - name: 'Run Integration Tests'
        working-directory: ./backend
        run: npm run test:integration
        
      - name: 'Upload Integration Test Results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: ./backend/test-results/
          retention-days: 30

  # Job 5: Performance Testing
  performance-tests:
    name: 'Performance & Load Testing'
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: equoria_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 'Install Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Database Dependencies'
        working-directory: ./packages/database
        run: npm ci
        
      - name: 'Setup Database'
        working-directory: ./packages/database
        run: |
          npx prisma generate --schema=prisma/schema.prisma
          npx prisma migrate deploy --schema=prisma/schema.prisma
          
      - name: 'Seed Performance Test Database'
        working-directory: ./backend
        run: npm run seed:performance
        
      - name: 'Run Performance Tests'
        working-directory: ./backend
        run: npm run test:performance
        
      - name: 'Upload Performance Results'
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: ./backend/performance-results/
          retention-days: 30

  # Job 6: Frontend Testing
  frontend-tests:
    name: 'Frontend Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 'Install Dependencies'
        working-directory: ./frontend
        run: npm ci
        
      - name: 'Run Frontend Tests'
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        
      - name: 'Upload Frontend Coverage'
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Job 7: Build Validation
  build-validation:
    name: 'Build Validation'
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            
      - name: 'Install Backend Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Frontend Dependencies'
        working-directory: ./frontend
        run: npm ci
        
      - name: 'Build Backend'
        working-directory: ./backend
        run: npm run build
        
      - name: 'Build Frontend'
        working-directory: ./frontend
        run: npm run build
        
      - name: 'Upload Build Artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            ./backend/dist/
            ./frontend/build/
          retention-days: 7

  # Job 8: Security Scanning
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            
      - name: 'Install Backend Dependencies'
        working-directory: ./backend
        run: npm ci
        
      - name: 'Install Frontend Dependencies'
        working-directory: ./frontend
        run: npm ci
        
      - name: 'Run Security Audit (Backend)'
        working-directory: ./backend
        run: npm audit --audit-level=moderate
        
      - name: 'Run Security Audit (Frontend)'
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

  # Job 9: Deployment Readiness Check
  deployment-readiness:
    name: 'Deployment Readiness Check'
    runs-on: ubuntu-latest
    needs: [build-validation, security-scan, performance-tests]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 'Download Coverage Reports'
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: ./coverage/
          
      - name: 'Validate Deployment Readiness'
        run: |
          echo "✅ All tests passed"
          echo "✅ Build artifacts created"
          echo "✅ Security scans completed"
          echo "✅ Performance tests passed"
          echo "🚀 Ready for deployment"
          
      - name: 'Create Deployment Summary'
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: All passed ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: Successful ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: No critical issues ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Within acceptable limits ✅" >> $GITHUB_STEP_SUMMARY
